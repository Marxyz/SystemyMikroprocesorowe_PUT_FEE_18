C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 23:13:59 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Users\Arkadiusz\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "aduc831.h"    //Definitions of ADuC831 registers name
   2          #include "stdint.h"     //Standard integers
   3          #include "stdfloat.h" //Standard float
   4          #include "IO.h"                         //Input/output definitions
   5          #include <stdlib.h>
   6          #define ca_Vref 5.0
   7          #define ca_Resolution 12
   8          #define ca_Maximum_Value ((0x000001ul<<ca_Resolution)-1)
   9          #define F_OSC 11058000
  10          #define pars 12
  11          #define t_resol 16
  12          #define OKRES 50
  13          
  14          #define Tx_Tau(dzielnik) (float)((float)dzielnik/F_OSC)
  15          #define Tx_N(czas_ms, dzielnik) (unsigned int)((float)czas_ms/Tx_Tau(dzielnik)/1000.0)
  16          #define T1_Rejestr(czas_ms) ((0x000001ul<<t_resol)-Tx_N(czas_ms,pars))
  17          #define T1_Set(czas_ms) TL1 = T1_Rejestr(czas_ms);TH1 = T1_Rejestr(czas_ms)>>8;
  18          
  19          float32_t modulo(float32_t a, float32_t b)
  20          {
  21   1              int16_t result = (int16_t)(a/b);
  22   1              return  a - (float32_t)(result ) *b;
  23   1      }
  24          
  25          typedef struct
  26          {
  27                  double okres;
  28                  double amplituda;
  29                  double offset;
  30                  double t;
  31                  double delta_t;
  32                  double rosnace;
  33              double opadajace;
  34          }parametry_sygnalu_t;
  35          
  36          //float32_t pila(parametry_sygnalu_t* syg)
  37          //{
  38          //      
  39          //      return syg->amplituda*(modulo(syg->t, (syg->okres)))/(syg->okres) + syg->offset;
  40          //}
  41          
  42          
  43          float32_t trojkat(parametry_sygnalu_t* syg)
  44          {
  45   1              float32_t time, result;
  46   1              double A = syg->amplituda;
  47   1              double T = syg->okres;
  48   1              double off = syg->offset;
  49   1              double ros = syg->rosnace;
  50   1          double opad = syg->opadajace;
  51   1              double del = syg->delta_t;
  52   1              time = modulo(syg->t,T);
  53   1              if(time > ros )
  54   1              {
C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 23:13:59 PAGE 2   

  55   2                      result = -A  * 1.0 / (opad) *(time - ros) + A + off;
  56   2              return result;
  57   2              }
  58   1                      
  59   1              result =   A*time/(ros) + off;
  60   1          return result;
  61   1      }
  62          
  63          typedef union
  64          {
  65                  uint16_t wartosc;
  66                  struct
  67                  {
  68                          uint8_t bajt_gorny;
  69                          uint8_t bajt_dolny;
  70                  }slowo;
  71          }probka_t;
  72          
  73          probka_t probka = {0};
  74          float32_t probka_napiecie = 0;
  75          parametry_sygnalu_t pilaParam;
  76          
  77          void timer1() interrupt 3
  78          {
  79   1              T1_Set(OKRES);
  80   1              pilaParam.t += pilaParam.delta_t;
  81   1              if(pilaParam.t > pilaParam.okres)pilaParam.t = pilaParam.delta_t;
  82   1              probka_napiecie = trojkat(&pilaParam);
  83   1              probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
  84   1              probka.wartosc = (uint16_t)(probka_napiecie* (1.0 / (1.0 * ca_Vref ))* (float32_t)ca_Maximum_Value);
  85   1              DAC0H = probka.slowo.bajt_gorny;
  86   1              DAC0L = probka.slowo.bajt_dolny;
  87   1      }
  88          
  89          int main()
  90          {
  91   1              
  92   1              ET1 = 1;
  93   1              EA = 1;
  94   1              DACCON = 0x7F;
  95   1              TMOD = 0x10;
  96   1              
  97   1              pilaParam.okres = 4.0;
  98   1              pilaParam.amplituda = 3.0;
  99   1              pilaParam.offset = 0;
 100   1              pilaParam.t = 0.0;
 101   1              pilaParam.rosnace = 2;
 102   1          pilaParam.opadajace = 2;
 103   1              pilaParam.delta_t = ((float32_t)OKRES/1000.0);
 104   1              
 105   1              T1_Set(OKRES)
 106   1              TR1 = 1;
 107   1              while(1){};
 108   1              
 109   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    623    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 23:13:59 PAGE 3   

   DATA SIZE        =     34      40
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
