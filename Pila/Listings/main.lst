C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 20:11:18 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Users\Arkadiusz\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "aduc831.h"    //Definitions of ADuC831 registers name
   2          #include "stdint.h"     //Standard integers
   3          #include "stdfloat.h" //Standard float
   4          #include "IO.h"                         //Input/output definitions
   5          
   6          #define ca_Vref 5.0
   7          #define ca_Resolution 12
   8          #define ca_Maximum_Value ((0x000001ul<<ca_Resolution)-1)
   9          #define F_OSC 12000000.0
  10          #define pars 12
  11          #define t_resol 16
  12          #define OKRES 10
  13          
  14          float32_t SecondsPerHit(float32_t f_osc, int parser)
  15          {
  16   1               return (float32_t)((float32_t)parser/f_osc);
  17   1      }
  18          
  19          uint32_t CalculateTimerHitCount(uint32_t time_ms, float32_t f_osc, int parser)
  20          {
  21   1                      float32_t sph;
  22   1                      sph = SecondsPerHit(f_osc,parser);
  23   1                      return (uint32_t)((float)time_ms * sph / 1000);
  24   1      }
  25          
  26          void SetTimerRegisters(time_ms)
  27          {
  28   1                      uint32_t N;
  29   1                      N = CalculateTimerHitCount(time_ms, F_OSC, pars);
  30   1                      TL1 = (0x000001ul << t_resol) - N;
  31   1                      TH1 = TL1 >> 8;
  32   1      }
  33          
  34          float32_t modulo(float32_t a, float32_t b)
  35          {
  36   1              int16_t result = (int16_t)(a/b);
  37   1              float32_t mod = a - (float32_t)(result ) *b;
  38   1              return mod;
  39   1      }
  40          
  41          typedef struct
  42          {
  43                  double okres;
  44                  double amplituda;
  45                  double offset;
  46                  double t;
  47                  double delta_t;
  48          }parametry_sygnalu_t;
  49          
  50          float32_t pila(parametry_sygnalu_t* syg)
  51          {
  52   1              return syg->amplituda*(modulo(syg->t, (syg->okres)))/(syg->okres) + syg->offset;
  53   1      }
  54          
C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 20:11:18 PAGE 2   

  55          typedef union
  56          {
  57                  uint16_t wartosc;
  58                  struct
  59                  {
  60                          uint8_t bajt_gorny;
  61                          uint8_t bajt_dolny;
  62                  }slowo;
  63          }probka_t;
  64          
  65          probka_t probka = {0};
  66          float32_t probka_napiecie = 0;
  67          parametry_sygnalu_t pilaParam;
  68          
  69          void timer1() interrupt 3
  70          {
  71   1              SetTimerRegisters(OKRES);
  72   1              pilaParam.t += pilaParam.delta_t;
  73   1              if(pilaParam.t >= pilaParam.okres)pilaParam.t = pilaParam.delta_t;
  74   1              probka_napiecie = pila(&pilaParam);
  75   1              probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
  76   1              probka_napiecie = (probka_napiecie < 0)? 0: probka_napiecie;
  77   1              probka.wartosc = (uint16_t)(probka_napiecie/ca_Vref * (float32_t)ca_Maximum_Value);
  78   1              DAC0H = probka.slowo.bajt_gorny;
  79   1              DAC0L = probka.slowo.bajt_dolny;
  80   1      }
  81          
  82          int main()
  83          {
  84   1              
  85   1              ET1 = 1;
  86   1              EA = 1;
  87   1              DACCON = 0x7F;
  88   1              TMOD = 0x10;
  89   1              
  90   1              pilaParam.okres = 2.0;
  91   1              pilaParam.amplituda = 5.0;
  92   1              pilaParam.offset = 0.0;
  93   1              pilaParam.t = 0.0;
  94   1              pilaParam.delta_t = ((float32_t)OKRES/1000.0);
  95   1              
  96   1              SetTimerRegisters(OKRES);
  97   1              
  98   1              TR1 = 1;
  99   1        while(1){};
 100   1              return 0;
 101   1              
 102   1      }
*** WARNING C294 IN LINE 100 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    614    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
