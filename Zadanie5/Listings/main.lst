C51 COMPILER V9.59.0.0   MAIN                                                              12/05/2018 01:34:04 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "aduc831.h"  //Definitions of ADuC831 registers name
   2          #include "stdint.h"   //Standard integers
   3          #include "stdfloat.h" //Standard float
   4          #include "IO.h"       //Input/output definitions
   5          #include <stdlib.h>
   6          #include <string.h>
   7          #include <stdio.h>
   8          #define ca_Vref 5.0
   9          #define ca_Resolution 12
  10          #define ca_Maximum_Value ((0x000001ul<<ca_Resolution)-1)
  11          #define F_OSC 11058000
  12          #define pars 12
  13          #define t_resol 16
  14          #define OKRES 1
  15          
  16          #define Tx_Tau(dzielnik) (float)((float)dzielnik/F_OSC)
  17          #define Tx_N(czas_ms, dzielnik) (unsigned int)((float)czas_ms/Tx_Tau(dzielnik)/1000.0)
  18          #define T1_Rejestr(czas_ms) ((0x000001ul<<t_resol)-Tx_N(czas_ms,pars))
  19          #define T1_Set(czas_ms) TL1 = T1_Rejestr(czas_ms);TH1 = T1_Rejestr(czas_ms)>>8;
  20          
  21          char terminal[10];
  22          int itr = 0;
  23          char ready = '0';
  24          char type = '0';
  25          
  26          void toneUartInterrupt () interrupt 4
  27          {
  28   1        char buffer;
  29   1        if(RI)
  30   1        {
  31   2          buffer = _getKey();
  32   2          if((buffer == '\r') || itr == 9)
  33   2          { 
  34   3            terminal[itr] = '\0';     
  35   3            itr = 0;
  36   3            ready = '1';
  37   3            //strncpy(values, terminal, 6);
  38   3            //UART_puts(terminal);
  39   3            //memset(terminal, 0, sizeof(terminal[0])*20);
  40   3          }
  41   2          else
  42   2          {
  43   3            terminal[itr] = buffer;
  44   3            SBUF = terminal[itr];
  45   3            itr++;
  46   3          }
  47   2          RI=0;
  48   2        }
  49   1        if(TI){
  50   2          TI = 0;
  51   2        }
  52   1        return;
  53   1      }
  54          
C51 COMPILER V9.59.0.0   MAIN                                                              12/05/2018 01:34:04 PAGE 2   

  55          float32_t modulo(float32_t a, float32_t b)
  56          {
  57   1        int16_t result = (int16_t)(a/b);
  58   1        return  a - (float32_t)(result ) *b;
  59   1      }
  60          
  61          typedef struct
  62          {
  63            double okres;
  64            double amplituda;
  65            double offset;
  66            double t;
  67            double delta_t;
  68            double param;
  69          }parametry_sygnalu_t;
  70          
  71          //float32_t pila(parametry_sygnalu_t* syg)
  72          //{
  73          //  
  74          //  return syg->amplituda*(modulo(syg->t, (syg->okres)))/(syg->okres) + syg->offset;
  75          //}
  76          
  77          
  78          float32_t trojkat(parametry_sygnalu_t* syg)
  79          {
  80   1        float32_t time, result;
  81   1        double A = syg->amplituda;
  82   1        double T = syg->okres;
  83   1        double off = syg->offset;
  84   1        double param = syg->param;
  85   1        double del = syg->delta_t;
  86   1        time = modulo(syg->t,T);
  87   1        if(time > param + del)
  88   1        {
  89   2          result = -A  * 1.0 / (T - param) *(time - param) + A + off;
  90   2              return result;
  91   2        }
  92   1          
  93   1        result =   A*time/(param) + off;
  94   1          return result;
  95   1      }
  96          
  97          typedef union
  98          {
  99            uint16_t wartosc;
 100            struct
 101            {
 102              uint8_t bajt_gorny;
 103              uint8_t bajt_dolny;
 104            }slowo;
 105          }probka_t;
 106          
 107          probka_t probka = {0};
 108          float32_t probka_napiecie = 0;
 109          parametry_sygnalu_t pilaParam;
 110          
 111          void timer1() interrupt 3
 112          {
 113   1        T1_Set(OKRES);
 114   1        pilaParam.t += pilaParam.delta_t;
 115   1        if(pilaParam.t > pilaParam.okres)pilaParam.t = pilaParam.delta_t;
 116   1        probka_napiecie = trojkat(&pilaParam);
C51 COMPILER V9.59.0.0   MAIN                                                              12/05/2018 01:34:04 PAGE 3   

 117   1        probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
 118   1        probka.wartosc = (uint16_t)(probka_napiecie* (1.0 / (1.0 * ca_Vref ))* (float32_t)ca_Maximum_Value);
 119   1        DAC0H = probka.slowo.bajt_gorny;
 120   1        DAC0L = probka.slowo.bajt_dolny;
 121   1      }
 122          
 123          int main()
 124          {
 125   1        
 126   1        ET1 = 1;
 127   1        EA = 1;
 128   1        ES = 1;
 129   1        DACCON = 0x7F;
 130   1        TMOD = 0x10;
 131   1        
 132   1        //UART
 133   1        REN = 1;
 134   1        SM0 = 0x00;
 135   1        SM1 = 0x01;
 136   1        
 137   1        //TIMER3 SETTINGS
 138   1        T3CON = 0x81;
 139   1        T3FD = 0x20;
 140   1        //PRIORYTETY
 141   1        PS=1;
 142   1        PT1=0;
 143   1        
 144   1        //DEFAULTS
 145   1        pilaParam.okres = 4.0;
 146   1        pilaParam.amplituda = 3.0;
 147   1        pilaParam.offset = 1.5;
 148   1        pilaParam.t = 0.0;
 149   1        pilaParam.param = 1.5;
 150   1        pilaParam.delta_t = ((float32_t)OKRES/1000.0);
 151   1        
 152   1        T1_Set(OKRES);
 153   1        TR1 = 1;
 154   1        while(1)
 155   1        {
 156   2            
 157   2        }
 158   1        
 159   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    782    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44      36
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
