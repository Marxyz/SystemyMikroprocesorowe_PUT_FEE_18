C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "aduc831.h"  /* Definitions of ADuC831 registers name */
   2          #include "stdint.h"   /* Standard integers */
   3          #include "stdfloat.h"  /* Standard float */
   4          #include "IO.h"       /* Input/output definitions */
   5          #include <stdlib.h> /* for atof() */
   6          #include <string.h> /* for memset() and memcpy() */
   7          
   8          #define ca_Vref 5.0
   9          #define ca_Resolution 12
  10          #define ca_Maximum_Value ((0x000001ul<<ca_Resolution)-1)
  11          #define F_OSC 11058000
  12          #define pars 12
  13          #define t_resol 16
  14          #define OKRES 1
  15          
  16          #define Tx_Tau(dzielnik) (float)((float)dzielnik/F_OSC)
  17          #define Tx_N(czas_ms, dzielnik) (unsigned int)((float)czas_ms/Tx_Tau(dzielnik)/1000.0)
  18          #define T1_Rejestr(czas_ms) ((0x000001ul<<t_resol)-Tx_N(czas_ms,pars))
  19          #define T1_Set(czas_ms) TL1 = T1_Rejestr(czas_ms);TH1 = T1_Rejestr(czas_ms)>>8;
  20          
  21          #define RAMKA_OKRES (2)
  22          #define RAMKA_AMPLITUDA (6)
  23          #define RAMKA_OFFSET (10)
  24          #define RAMKA_ROSNACE (14)
  25          #define RAMKA_OPADAJACE (18)
  26          
  27          xdata char terminal[30];
  28          xdata int itr = 0;
  29          xdata int ready = 0;
  30          //p - pila, t - trojkat
  31          xdata char type = 'p';
  32          
  33          /**
  34           * @brief UART interrupt to fill terminal.
  35           *
  36           * line of data specified as:
  37           * char type of plot, float amplitude, float offset
  38           * float rosnace, float opadajace. Formatted without ',' delimiter
  39           */
  40          void uartInterrupt () interrupt 4
  41          {
  42   1        char buffer;
  43   1        if(RI)
  44   1        {
  45   2          buffer = _getKey();
  46   2          if((buffer == '\r'))
  47   2          { 
  48   3            terminal[itr] = '\0';     
  49   3            itr = 0;
  50   3            ready = 1;
  51   3          }
  52   2          else
  53   2          {
  54   3            terminal[itr] = buffer;
C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 2   

  55   3            SBUF = terminal[itr];
  56   3            itr++;
  57   3          }
  58   2          RI=0;
  59   2        }
  60   1        if(TI){
  61   2          TI = 0;
  62   2        }
  63   1        return;
  64   1      }
  65          
  66          /**
  67           * @brief Floating point modulo operation. Takes two float32_t numbers.
  68           * 
  69           * @param a The nominator float32_t number
  70           * @param b The denominator float32_t number
  71           * @return float32_t The result of operation.
  72           */
  73          float32_t modulo(float32_t a, float32_t b)
  74          {
  75   1        int16_t result = (int16_t)(a/b);
  76   1        return  a - (float32_t)(result ) *b;
  77   1      }
  78          
  79          
  80          /**
  81           * @brief Structure representing signal parameters.
  82           * Okres - singal period interval.
  83           * Amplituda - signal amplitude.
  84           * Offset - generating signal offset.
  85           * t - should not be set, accumulates time for inner calculation
  86           * delta_t - should not be set, calculated during initialization
  87           * rosnace - time of signal's rising slope
  88           * opadajace - time of signal's declining slope.
  89           */
  90          typedef struct
  91          {
  92            double okres; 
  93            double amplituda;
  94            double offset;
  95            double t;
  96            double delta_t;
  97            double rosnace;
  98            double opadajace;
  99          }parametry_sygnalu_t;
 100          
 101          
 102          /**
 103           * @brief Generates single signal sample.
 104           * 
 105           * @param parametry_sygnalu_t* syg Signal parameters pointer
 106           * @return float32_t Calculated sample.
 107           */
 108          float32_t GenerateTrojkat(parametry_sygnalu_t* syg)
 109          {
 110   1        // Setting values of signal in fixed declaration outside of given reference, in order to save CODE memory
             -.
 111   1        float32_t time, result;
 112   1        double A = syg->amplituda;
 113   1        double T = syg->okres;
 114   1        double off = syg->offset;
 115   1        double ros = syg->rosnace;
C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 3   

 116   1        double opad = syg->opadajace;
 117   1        double del = syg->delta_t;
 118   1        time = modulo(syg->t,T);
 119   1        if(time > ros )
 120   1        {
 121   2          result = -A  * 1.0 / (opad) *(time - ros) + A + off;
 122   2              return result;
 123   2        }
 124   1        else
 125   1        {
 126   2          result =   A*time/(ros) + off;
 127   2        }
 128   1          
 129   1        
 130   1          return result;
 131   1      }
 132          
 133          /**
 134           * @brief Generates single signal sample.
 135           * 
 136           * @param parametry_sygnalu_t* syg Signal parameters pointer
 137           * @return float32_t Calculated sample.
 138           */
 139          
 140          float32_t pila(parametry_sygnalu_t* syg)
 141          {
 142   1        return syg->amplituda*(modulo(syg->t, (syg->okres)))/(syg->okres) + syg->offset;
 143   1      }
 144          
 145          /**
 146           * @brief Union representing sample value in register memory.
 147           * 
 148           */
 149          typedef union
 150          {
 151            uint16_t wartosc;
 152            struct
 153            {
 154              uint8_t bajt_gorny;
 155              uint8_t bajt_dolny;
 156            }slowo;
 157          }probka_t;
 158          
 159          xdata probka_t probka = {0};
 160          xdata float32_t probka_napiecie = 0;
 161          xdata parametry_sygnalu_t sygnalParam;
 162          
 163          
 164          
 165          /**
 166           * @brief Timer interrupt function.
 167           * Generates signal samples and instructs analog outputs to emit signal.
 168           *
 169           * 
 170           */
 171          void timer1() interrupt 3
 172          {
 173   1        T1_Set(OKRES);
 174   1        sygnalParam.t += sygnalParam.delta_t;
 175   1        if(sygnalParam.t > sygnalParam.okres)sygnalParam.t = sygnalParam.delta_t;
 176   1        switch (type){
 177   2          case 'p':
C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 4   

 178   2          {
 179   3            probka_napiecie = pila(&sygnalParam);
 180   3            probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
 181   3            probka_napiecie = (probka_napiecie < 0)? 0: probka_napiecie;
 182   3            probka.wartosc = (uint16_t)(probka_napiecie/ca_Vref * (float32_t)ca_Maximum_Value);
 183   3            break;
 184   3          }
 185   2          case 't':
 186   2          {
 187   3            probka_napiecie = GenerateTrojkat(&sygnalParam);
 188   3            probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
 189   3            probka.wartosc = (uint16_t)(probka_napiecie* (1.0 / (1.0 * ca_Vref ))* (float32_t)ca_Maximum_Value);
 190   3            break;
 191   3          }
 192   2        }
 193   1        //probka_napiecie = GenerateTrojkat(&sygnalParam);
 194   1        
 195   1        DAC0H = probka.slowo.bajt_gorny;
 196   1        DAC0L = probka.slowo.bajt_dolny;
 197   1      }
 198          
 199          /**
 200           * @brief Getting parameters from input and setting them to global sygnalParam structure.
 201           * 
 202           * @bug using sscanf - probably undefined behaviour, cannot read more than 5 floats, but return value from
             - sscanf is correct.
 203           * @return void
 204           */
 205          
 206          void getParameters()
 207          {
 208   1        xdata float tmp;
 209   1        xdata char string[4];
 210   1        if(ready == 1)
 211   1          {
 212   2            TR1=0;
 213   2            //sscanf(terminal, "%cO%fA%fF%fR%fP%g" , &type, &sygnalParam.okres, &sygnalParam.amplituda, &sygnalPara
             -m.offset, &sygnalParam.rosnace, &sygnalParam.opadajace);
 214   2            //tmp = (float)(atoi(&terminal[2])) + (float)(atoi(&terminal[4]))/10 ;
 215   2            //sygnalParam.okres = tmp;
 216   2            
 217   2            memcpy(string, &terminal[RAMKA_OKRES],3);
 218   2            string[3] = '\0';
 219   2            sygnalParam.okres = atof(string);
 220   2            memset(string,0,4);
 221   2            
 222   2            memcpy(string, &terminal[RAMKA_AMPLITUDA],3);
 223   2            string[3] = '\0';
 224   2            sygnalParam.amplituda = atof(string);
 225   2            memset(string,0,4);
 226   2            
 227   2            memcpy(string, &terminal[RAMKA_OFFSET],3);
 228   2            sygnalParam.offset = atof(string);
 229   2            memset(string,0,4);
 230   2            
 231   2            memcpy(string, &terminal[RAMKA_ROSNACE],3);
 232   2            sygnalParam.rosnace = atof(string);
 233   2            memset(string,0,4);
 234   2            
 235   2            memcpy(string, &terminal[RAMKA_OPADAJACE],3);
 236   2            sygnalParam.opadajace = atof(string);
 237   2            memset(string,0,4);
C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 5   

 238   2            
 239   2            memset(terminal, 0, sizeof(terminal[0])*30);
 240   2            ready = 0;
 241   2            TR1 = 1;
 242   2          }
 243   1      }
*** WARNING C280 IN LINE 208 OF main.c: 'tmp': unreferenced local variable
 244          
 245          /**
 246           * @brief Program entry point.
 247           * 
 248           * @return int
 249           */
 250          
 251          int main()
 252          {
 253   1        ET1 = 1;
 254   1        EA = 1;
 255   1        // UART INTERRUPT
 256   1        ES = 1;
 257   1        DACCON = 0x7F;
 258   1        TMOD = 0x10;
 259   1        
 260   1        
 261   1        REN = 1;
 262   1        SM0 = 0x00;
 263   1        SM1 = 0x01;
 264   1        
 265   1        //TIMER3 SETTINGS
 266   1        T3CON = 0x81;
 267   1        T3FD = 0x20;
 268   1        
 269   1        //INTERRUPT PRIORITY
 270   1        PS=1;
 271   1        PT1=0;
 272   1        
 273   1        //DEFAULTS
 274   1        sygnalParam.okres = 3.0;
 275   1        sygnalParam.amplituda = 3.0;
 276   1        sygnalParam.offset = 1;
 277   1        sygnalParam.t = 0.0;
 278   1        sygnalParam.rosnace = 1.5;
 279   1        sygnalParam.opadajace = 1.5;
 280   1        sygnalParam.delta_t = ((float32_t)OKRES/1000.0);
 281   1        
 282   1        T1_Set(OKRES)
 283   1        TR1 = 1;
 284   1        while(1)
 285   1        {
 286   2          getParameters();
 287   2        };
 288   1        
 289   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1403    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     69       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      43
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   MAIN                                                              12/06/2018 00:59:38 PAGE 6   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
