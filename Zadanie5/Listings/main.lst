C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 21:52:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "aduc831.h"  //Definitions of ADuC831 registers name
   2          #include "stdint.h"   //Standard integers
   3          #include "stdfloat.h" //Standard float
   4          #include "IO.h"       //Input/output definitions
   5          #include <stdlib.h>
   6          #define ca_Vref 5.0
   7          #define ca_Resolution 12
   8          #define ca_Maximum_Value ((0x000001ul<<ca_Resolution)-1)
   9          #define F_OSC 11058000
  10          #define pars 12
  11          #define t_resol 16
  12          #define OKRES 1
  13          
  14          #define Tx_Tau(dzielnik) (float)((float)dzielnik/F_OSC)
  15          #define Tx_N(czas_ms, dzielnik) (unsigned int)((float)czas_ms/Tx_Tau(dzielnik)/1000.0)
  16          #define T1_Rejestr(czas_ms) ((0x000001ul<<t_resol)-Tx_N(czas_ms,pars))
  17          #define T1_Set(czas_ms) TL1 = T1_Rejestr(czas_ms);TH1 = T1_Rejestr(czas_ms)>>8;
  18          
  19          float32_t modulo(float32_t a, float32_t b)
  20          {
  21   1        int16_t result = (int16_t)(a/b);
  22   1        return  a - (float32_t)(result ) *b;
  23   1      }
  24          
  25          typedef struct
  26          {
  27            double okres;
  28            double amplituda;
  29            double offset;
  30            double t;
  31            double delta_t;
  32            double param;
  33          }parametry_sygnalu_t;
  34          
  35          //float32_t pila(parametry_sygnalu_t* syg)
  36          //{
  37          //  
  38          //  return syg->amplituda*(modulo(syg->t, (syg->okres)))/(syg->okres) + syg->offset;
  39          //}
  40          
  41          
  42          float32_t trojkat(parametry_sygnalu_t* syg)
  43          {
  44   1        float32_t t;
  45   1        double A = syg->amplituda;
  46   1        double T = syg->okres;
  47   1        double off = syg->offset;
  48   1        double param = syg->param;
  49   1        double del = syg->delta_t;
  50   1        t = modulo(syg->t,T);
  51   1        if(t > param + del)
  52   1        {
  53   2          return (A - A * t * 1.0 / (T - param)) + off;
  54   2        }
C51 COMPILER V9.59.0.0   MAIN                                                              12/04/2018 21:52:55 PAGE 2   

  55   1          
  56   1        return  A*t/(param) + off;
  57   1      }
  58          
  59          typedef union
  60          {
  61            uint16_t wartosc;
  62            struct
  63            {
  64              uint8_t bajt_gorny;
  65              uint8_t bajt_dolny;
  66            }slowo;
  67          }probka_t;
  68          
  69          probka_t probka = {0};
  70          float32_t probka_napiecie = 0;
  71          parametry_sygnalu_t pilaParam;
  72          
  73          void timer1() interrupt 3
  74          {
  75   1        T1_Set(OKRES);
  76   1        pilaParam.t += pilaParam.delta_t;
  77   1        if(pilaParam.t > pilaParam.okres)pilaParam.t = pilaParam.delta_t;
  78   1        probka_napiecie = trojkat(&pilaParam);
  79   1        probka_napiecie = (probka_napiecie>ca_Vref)? ca_Vref : probka_napiecie;
  80   1        probka.wartosc = (uint16_t)(probka_napiecie* (1.0 / (1.0 * ca_Vref ))* (float32_t)ca_Maximum_Value);
  81   1        DAC0H = probka.slowo.bajt_gorny;
  82   1        DAC0L = probka.slowo.bajt_dolny;
  83   1      }
  84          
  85          int main()
  86          {
  87   1        
  88   1        ET1 = 1;
  89   1        EA = 1;
  90   1        DACCON = 0x7F;
  91   1        TMOD = 0x10;
  92   1        
  93   1        pilaParam.okres = 2.0;
  94   1        pilaParam.amplituda = 4.0;
  95   1        pilaParam.offset = 0.5;
  96   1        pilaParam.t = 0.0;
  97   1        pilaParam.param = 1.5;
  98   1        pilaParam.delta_t = ((float32_t)OKRES/1000.0);
  99   1        
 100   1        T1_Set(OKRES)
 101   1        TR1 = 1;
 102   1        while(1){};
 103   1        
 104   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    609    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
